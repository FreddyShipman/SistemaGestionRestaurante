package GUI;

import DTOs.IngredienteProductoDTO;
import DTOs.NuevoProductoDTO;
import DTOs.ProductoDTO;
import com.sun.source.tree.ParenthesizedTree;
import entidades.IngredienteProducto;
import enums.EstadoProducto;
import enums.TipoProducto;
import excepciones.NegocioException;
import interfaces.IIngredienteBO;
import interfaces.IProductoBO;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import manejadoresDeObjetoNegocio.ManejadorObjetosNegocio;
import mappers.IngredienteProductoMapper;
import utils.IconCellRenderer;
import utils.SoloFiltroNumerico;

/**
 *
 * @author janot
 */
public class VentanaProductoNuevo extends javax.swing.JDialog {
    private Control control = new Control();
    private IProductoBO productoBO;
    private IIngredienteBO ingredienteBO;
    protected List<IngredienteProductoDTO> ingredientesProductoDTO = new ArrayList<>();
    VentanaProductos ventanaProductos;
    
    /**
     * Creates new form NewJDialog
     */
    public VentanaProductoNuevo(VentanaProductos ventana, boolean modal) {
        super(ventana, modal);
        this.ventanaProductos = ventana;
        initComponents();
        cargarComboBoxCategoria();
        productoBO = ManejadorObjetosNegocio.crearProductoBO();
        ingredienteBO = ManejadorObjetosNegocio.crearIngredienteBO();
        cargarDatosProductoAModificar();
        cargarDatosTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelAgregarIngrediente2 = new javax.swing.JLabel();
        jLabelProductoNuevo2 = new javax.swing.JLabel();
        jLabelIconCerrar = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldPrecio = new javax.swing.JTextField();
        jComboBoxCategoria = new javax.swing.JComboBox<>();
        jLabelCategoria = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jLabelPrecio = new javax.swing.JLabel();
        jLabelProductoNuevo1 = new javax.swing.JLabel();
        jLabelAgregarIngrediente1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanelMesero = new GUI.PanelRound();
        jLabelGuardar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIngredientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelAgregarIngrediente2.setFont(new java.awt.Font("Product Sans Infanity", 1, 18)); // NOI18N
        jLabelAgregarIngrediente2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelAgregarIngrediente2.setText("Ingrediente");
        jPanel1.add(jLabelAgregarIngrediente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, -1, -1));

        jLabelProductoNuevo2.setFont(new java.awt.Font("Product Sans Infanity", 1, 48)); // NOI18N
        jLabelProductoNuevo2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelProductoNuevo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProductoNuevo2.setText("Nuevo");
        jPanel1.add(jLabelProductoNuevo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 370, -1));

        jLabelIconCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cross-small.png"))); // NOI18N
        jLabelIconCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelIconCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelIconCerrarMouseClicked(evt);
            }
        });
        jPanel1.add(jLabelIconCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 60, 50));

        jTextFieldNombre.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jTextFieldNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 200, 30));

        jTextFieldPrecio.setBackground(new java.awt.Color(255, 255, 255));
        ((AbstractDocument) jTextFieldPrecio.getDocument()).setDocumentFilter(new SoloFiltroNumerico());
        jPanel1.add(jTextFieldPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, 130, 30));

        jComboBoxCategoria.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jComboBoxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 140, 110, 30));

        jLabelCategoria.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jLabelCategoria.setForeground(new java.awt.Color(0, 0, 0));
        jLabelCategoria.setText("Categoria");
        jPanel1.add(jLabelCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, -1, -1));

        jLabelNombre.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jLabelNombre.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNombre.setText("Nombre");
        jPanel1.add(jLabelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        jLabelPrecio.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jLabelPrecio.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPrecio.setText("Precio");
        jPanel1.add(jLabelPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, -1, -1));

        jLabelProductoNuevo1.setFont(new java.awt.Font("Product Sans Infanity", 1, 48)); // NOI18N
        jLabelProductoNuevo1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelProductoNuevo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProductoNuevo1.setText("Producto");
        jPanel1.add(jLabelProductoNuevo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 380, -1));

        jLabelAgregarIngrediente1.setFont(new java.awt.Font("Product Sans Infanity", 1, 18)); // NOI18N
        jLabelAgregarIngrediente1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelAgregarIngrediente1.setText("Agregar");
        jPanel1.add(jLabelAgregarIngrediente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 70, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, -1, -1));

        jPanelMesero.setBackground(new java.awt.Color(44, 44, 44));
        jPanelMesero.setRoundBottomLeft(15);
        jPanelMesero.setRoundBottomRight(15);
        jPanelMesero.setRoundTopLeft(15);
        jPanelMesero.setRoundTopRight(15);
        jPanelMesero.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelGuardar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelGuardar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGuardar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGuardar.setText("Guardar");
        jLabelGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelGuardarMouseClicked(evt);
            }
        });
        jPanelMesero.add(jLabelGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 110, 30));

        jPanel1.add(jPanelMesero, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 480, 110, 30));

        jTableIngredientes.setBackground(new java.awt.Color(255, 255, 255));
        jTableIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Ingrediente", "Cantidad", "Unidad De Medida", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableIngredientes.setRowHeight(30);
        jTableIngredientes.setRowSelectionAllowed(false);
        jTableIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableIngredientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableIngredientes);
        if (jTableIngredientes.getColumnModel().getColumnCount() > 0) {
            jTableIngredientes.getColumnModel().getColumn(0).setResizable(false);
            jTableIngredientes.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableIngredientes.getColumnModel().getColumn(1).setResizable(false);
            jTableIngredientes.getColumnModel().getColumn(2).setResizable(false);
            jTableIngredientes.getColumnModel().getColumn(3).setResizable(false);
            jTableIngredientes.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 570, 240));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelIconCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIconCerrarMouseClicked
        control.cerrarDialogo(this);
    }//GEN-LAST:event_jLabelIconCerrarMouseClicked

    private void jLabelGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelGuardarMouseClicked
        operacionProducto();
    }//GEN-LAST:event_jLabelGuardarMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        control.mostrarPantallaAgregarIngredienteAProducto(this,rootPaneCheckingEnabled);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jTableIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableIngredientesMouseClicked
        funcionalidadIconTablaEliminar(evt);
    }//GEN-LAST:event_jTableIngredientesMouseClicked


    private void operacionProducto(){
        if(ventanaProductos.producto == null){
            guardarProductoNuevo();
        }
        else if(ventanaProductos.producto != null){
            modificarProducto();
        }
        
        ventanaProductos.asignarDatosListaProductos();
        ventanaProductos.cargarDatosTabla();
    }
    
    private void cargarComboBoxCategoria(){
        jComboBoxCategoria.addItem(TipoProducto.PLATILLO);
        jComboBoxCategoria.addItem(TipoProducto.BEBIDA);
        jComboBoxCategoria.addItem(TipoProducto.POSTRE);     
    }
    
    public void cargarDatosTabla(){
        Icon iconoEliminar = new ImageIcon(getClass().getResource("/imagenes/eliminar.png"));
        
        DefaultTableModel model = (DefaultTableModel) jTableIngredientes.getModel();
        model.setRowCount(0);
        for (IngredienteProductoDTO ingredienteComandaDTO : ingredientesProductoDTO) {
            model.addRow(new Object[]{
                ingredienteComandaDTO.getId(),
                ingredienteComandaDTO.getIngrediente().getNombre(),
                ingredienteComandaDTO.getCantidad(),
                ingredienteComandaDTO.getIngrediente().getUnidadMedida()
            });
        }
        jTableIngredientes.setModel(model);
        
        jTableIngredientes.getColumnModel().getColumn(0).setMinWidth(0);
        jTableIngredientes.getColumnModel().getColumn(0).setMaxWidth(0);
        jTableIngredientes.getColumnModel().getColumn(0).setWidth(0);
        
        jTableIngredientes.getColumnModel().getColumn(4).setMinWidth(40);
        jTableIngredientes.getColumnModel().getColumn(4).setMaxWidth(40);
        jTableIngredientes.getColumnModel().getColumn(4).setWidth(40);
        jTableIngredientes.getColumnModel().getColumn(4).setCellRenderer(new IconCellRenderer(iconoEliminar));
    }
    
    
    private void funcionalidadIconTablaEliminar(MouseEvent evt){
        int fila = jTableIngredientes.rowAtPoint(evt.getPoint());
        int columna = jTableIngredientes.columnAtPoint(evt.getPoint());
        
        if (columna == 4) { // columna del ícono
            Object id = jTableIngredientes.getModel().getValueAt(fila, 0);
            ingredientesProductoDTO.remove(fila);
            if(id != null){
                try {
                    ingredienteBO.quitarIngredienteAlProducto((Long) id);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            cargarDatosTabla();
        } 
    }
    
    private void guardarProductoNuevo(){
        if(jTextFieldNombre.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle un nombre al producto");
        }
        else if(jTextFieldPrecio.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle un precio al producto");
        }
        else if(jComboBoxCategoria.getSelectedItem().equals(null)){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle una categoria al producto");
        }
        else if(jTextFieldPrecio.getText().equals(".")){
            JOptionPane.showMessageDialog(this, "El precio no puede ser un .");
        }
        else{
            String nombre = jTextFieldNombre.getText();
            String precio = jTextFieldPrecio.getText();
            TipoProducto categoria = (TipoProducto) jComboBoxCategoria.getSelectedItem();
            List<IngredienteProductoDTO> ingredientes = ingredientesProductoDTO;

            NuevoProductoDTO nuevoProductoDTO = new NuevoProductoDTO(EstadoProducto.HABILITADO, nombre, Double.parseDouble(precio), categoria, ingredientes);

            try {
                productoBO.agregarProductoAlMenu(nuevoProductoDTO);
                JOptionPane.showMessageDialog(rootPane, "Producto agregado con exito");
                control.cerrarDialogo(this);
            } catch (NegocioException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }
    }
    
    private void modificarProducto(){
        if(jTextFieldNombre.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle un nombre al producto");
        }
        else if(jTextFieldPrecio.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle un precio al producto");
        }
        else if(jComboBoxCategoria.getSelectedItem().equals(null)){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle una categoria al producto");
        }
        else if(jTextFieldPrecio.getText().equals(".")){
            JOptionPane.showMessageDialog(this, "El precio no puede ser un .");
        }
        else{
            String nombre = jTextFieldNombre.getText();
            String precio = jTextFieldPrecio.getText();
            TipoProducto categoria = (TipoProducto) jComboBoxCategoria.getSelectedItem();
            List<IngredienteProductoDTO> ingredientes = ingredientesProductoDTO;

            ProductoDTO productoDTO = new ProductoDTO(ventanaProductos.producto.getId(),nombre, Double.parseDouble(precio), categoria, ventanaProductos.producto.getEstado(), ingredientes);

            try {
                productoBO.modificarProducto(productoDTO);
                JOptionPane.showMessageDialog(rootPane, "Producto Modificado con exito");
                control.cerrarDialogo(this);
            } catch (NegocioException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }
    }
    
    private void cargarDatosProductoAModificar(){
        if(ventanaProductos.producto != null){
            jTextFieldNombre.setText(ventanaProductos.producto.getNombre());
            jTextFieldPrecio.setText(String.valueOf(ventanaProductos.producto.getPrecio()));
            jComboBoxCategoria.setSelectedItem(ventanaProductos.producto.getTipo());
            
            for (IngredienteProducto ingredienteProducto : ventanaProductos.producto.getIngredientes()) {
                ingredientesProductoDTO.add(IngredienteProductoMapper.toDTO(ingredienteProducto));
            }            
        }
        cargarDatosTabla();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JComboBox<TipoProducto> jComboBoxCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAgregarIngrediente1;
    private javax.swing.JLabel jLabelAgregarIngrediente2;
    private javax.swing.JLabel jLabelCategoria;
    private javax.swing.JLabel jLabelGuardar;
    private javax.swing.JLabel jLabelIconCerrar;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPrecio;
    protected javax.swing.JLabel jLabelProductoNuevo1;
    protected javax.swing.JLabel jLabelProductoNuevo2;
    private javax.swing.JPanel jPanel1;
    private GUI.PanelRound jPanelMesero;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTable jTableIngredientes;
    protected javax.swing.JTextField jTextFieldNombre;
    protected javax.swing.JTextField jTextFieldPrecio;
    // End of variables declaration//GEN-END:variables
}
